---
title: "Class 14: RNAseq Project"
author: "Katie Mostoller A17259578"
format: pdf
toc: true
---


# Background
The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703

The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1

# Data import
Reading in the counts and metadata

```{r}
counts <- read.csv("GSE37704_featurecounts.csv", row.names = 1)
metadata <- read.csv("GSE37704_metadata.csv")
```

>Q. How many genes are in the dataset?

```{r}
nrow(counts)
```


> Q. How any control and knockdown experiment are there?

```{r}
head(metadata)
```

```{r}
table(metadata$condition)
```

## Tidy and verify data

>Q. Does the `metadata` match the `countdata`?

```{r}
head(counts)
```
The length column is a problem

```{r}
colnames(counts)
```

```{r}
metadata$id
```
```{r}
newcounts <- counts[,-1]
dim(counts)
```

Make sure the column names of the countsdata matches the id's listed in the metadata

```{r}
colnames(newcounts) == metadata$id
```


## Remove 0 count genes

```{r}
#Sum each row and select the rows that don't sum to zero (!= is the opposite of ++)
to.keep <- rowSums(newcounts) != 0

# Keep the gene rows that don't sum to 0
countData <- newcounts[to.keep, ]
```



# PCA quality control

We can use ur `prcomp()` function

```{r}
pc <- prcomp(t(countData), scale = T)
summary(pc)
```

Color by control(blue) or knockdown(red)
```{r}
metadata$condition
mycols <- c(rep("blue", 3), rep("red", 3))
```

Plot the pca
```{r}
library(ggplot2)

ggplot(pc$x) +
  aes(PC1, PC2) +
  geom_point(col=mycols)
```
>Q. How many genes are left after filtering out the 0's?

```{r}
nrow(countData)
```



# DESeq analysis

```{r}
#| message: false
library(DESeq2)
```


## Setup the DESeq input object

```{r}
dds = DESeqDataSetFromMatrix(countData=countData,
                             colData=metadata,
                             design=~condition)

```


## Run the DESeq

```{r}
dds <- DESeq(dds)
```


## Extract the results

```{r}
res <- results(dds)
```


# Volcano Plot

Plot log2 Fold-Change vs -log of adjusted p value with custom colors

```{r}
mycols <- rep("grey", nrow(res))
mycols[res$log2FoldChange >= +2] <- "blue"
mycols[res$log2FoldChange <= -2] <- "blue"
mycols[res$padj >= 0.005] <- "grey"
```


```{r}
ggplot(res) +
  aes(log2FoldChange, -log(padj)) +
  geom_point(col = mycols) +
  geom_vline(xintercept = c(-2,2), col = "red") +
  geom_hline(yintercept = -log(0.005), col = "red")
```



# Add gene annotation

We want to add SYMBOL and ENTREZID values to our results object

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
head(res)
```

our res dataset gene names are in ENSEMBL format
```{r}
res$symbol <- mapIds(org.Hs.eg.db,
              keys = rownames(res),
              keytype = "ENSEMBL",
              column = "SYMBOL")

res$entrez <- mapIds(org.Hs.eg.db,
              keys = rownames(res),
              keytype = "ENSEMBL",
              column = "ENTREZID")
```


# Save results

```{r}
write.csv(res, file = "myresults.csv")
```


# Pathway analysis

```{r}
#|mmessage: false
library(gage)
library(gageData)
library(pathview)
```

## KEGG

```{r}
data(kegg.sets.hs)
```

These are the ENTREZID nammes of genes involved in caffeine metabolism pathway
```{r}
head(kegg.sets.hs,1)
```
Make an input vector for `gage()` called `foldchanges` that has `names()` attribute set to ENTREZIDs

```{r}
foldchanges <- res$log2FoldChange
names(foldchanges) <- res$entrez
```

```{r}
keggres <- gage(foldchanges, gsets = kegg.sets.hs)
```

```{r}
attributes(keggres)
```
```{r}
head(keggres$less, 2)
```


```{r}
pathview(foldchanges, pathway.id = "hsa04110")
```

![](hsa04110.pathview.png)


```{r}
pathview(foldchanges, pathway.id = "hsa03030")
```

![](hsa03030.pathview.png)


```{r}
head(keggres$greater)
```

```{r}
pathview(foldchanges, pathway.id = "hsa04060")
```

![](hsa04060.pathview.png)


```{r}
pathview(foldchanges, pathway.id = "hsa05323")
```

![](hsa05323.pathview.png)


## GO Gene Ontology 

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus just on GO biological process (bp)
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets)


```

```{r}
head(gobpres$less)
```


## Reactome

We can use reactome via R or via their fancy new website interface. The web interface wants a set of ENTREZID values for your genes of interest that we need to generate.


```{r}
inds <- abs(res$log2FoldChange) >= 2 & res$padj <= 0.05
top.genes <- res$entrez[inds]
```


```{r}
write.table(top.genes, file="top_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```



